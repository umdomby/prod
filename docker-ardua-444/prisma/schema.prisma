generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id          Int           @id @default(autoincrement())
  fullName    String
  email       String        @unique
  resetToken  String?
  provider    String?
  providerId  String?
  password    String
  role        UserRole      @default(USER)
  img         String?
  devices     Devices[]
  savedRooms  SavedRoom[]
  proxyAccess ProxyAccess[] @relation // Обратное отношение к ProxyAccess
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Devices {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  savedRoom     SavedRoom?
  diviceName    String?
  devicesEnum   DevicesEnum @default(ArduaESP8266)
  idDevice      String      @unique
  autoReconnect Boolean
  autoConnect   Boolean
  closedDel     Boolean
  settings      Settings[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Settings {
  id             Int     @id @default(autoincrement())
  devicesId      Int     @unique
  devices        Devices @relation(fields: [devicesId], references: [id])
  servo1MinAngle Int?
  servo1MaxAngle Int?
  servo2MinAngle Int?
  servo2MaxAngle Int?
  b1             Boolean
  b2             Boolean
  servoView      Boolean
}

model SavedRoom {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  devicesId   Int?          @unique
  devices     Devices?      @relation(fields: [devicesId], references: [id])
  roomId      String        @unique
  isDefault   Boolean       @default(false)
  autoConnect Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  proxyAccess ProxyAccess[] // Связь с моделью ProxyAccess
}

model ProxyAccess {
  id          Int       @id @default(autoincrement())
  roomId      String
  room        SavedRoom @relation(fields: [roomId], references: [roomId])
  proxyRoomId String    @unique
  name        String?
  userId      Int? // Пользователь, которому предоставлен доступ (опционально)
  user        User?     @relation(fields: [userId], references: [id])
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum DevicesEnum {
  ArduaESP8266
}

enum UserRole {
  USER
  ADMIN
}

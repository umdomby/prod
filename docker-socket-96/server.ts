import { WebSocketServer, WebSocket } from 'ws';
import { IncomingMessage } from 'http';
import { getAllowedDeviceIds, getDeviceTelegramInfo } from './actions';
import { createServer } from 'http';
import axios from 'axios';

// Telegram Bot –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
let TELEGRAM_BOT_TOKEN: string | null = null; // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
let TELEGRAM_CHAT_ID: string | null = null; // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º chat_id
let lastTelegramMessageTime = 0;
const TELEGRAM_MESSAGE_INTERVAL = 5000;
const DEVICE_NAME = 'R1';

const PORT = 8096;
const WS_PATH = '/wsar';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "24.06.2025 13:56" (–ú–æ—Å–∫–≤–∞, UTC+3)
function formatDateTime(date: Date): string {
    const moscowOffset = 3 * 60 * 60 * 1000; // –°–º–µ—â–µ–Ω–∏–µ –ú–æ—Å–∫–≤—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (+3 —á–∞—Å–∞)
    const moscowDate = new Date(date.getTime() + moscowOffset);
    const day = String(moscowDate.getUTCDate()).padStart(2, '0');
    const month = String(moscowDate.getUTCMonth() + 1).padStart(2, '0');
    const year = moscowDate.getUTCFullYear();
    const hours = String(moscowDate.getUTCHours()).padStart(2, '0');
    const minutes = String(moscowDate.getUTCMinutes()).padStart(2, '0');
    return `${day}.${month}.${year} ${hours}:${minutes}`;
}

const server = createServer();
const wss = new WebSocketServer({
    server,
    path: WS_PATH
});

interface ClientInfo {
    ws: WebSocket;
    de?: string; // deviceId ‚Üí de
    ip: string;
    isIdentified: boolean;
    ct?: 'browser' | 'esp'; // clientType ‚Üí ct
    lastActivity: number;
    isAlive: boolean;
}

const clients = new Map<number, ClientInfo>();

// Ping clients every 30 seconds
setInterval(() => {
    clients.forEach((client, clientId) => {
        if (!client.isAlive) {
            client.ws.terminate();
            clients.delete(clientId);
            console.log(`Client ${clientId} terminated (no ping response)`);
            return;
        }
        client.isAlive = false;
        client.ws.ping(null, false);
    });
}, 30000);

wss.on('connection', async (ws: WebSocket, req: IncomingMessage) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (req.url !== WS_PATH) {
        ws.close(1002, 'Invalid path');
        return;
    }

    const clientId = Date.now();
    const ip = req.socket.remoteAddress || 'unknown';
    const client: ClientInfo = {
        ws,
        ip,
        isIdentified: false,
        lastActivity: Date.now(),
        isAlive: true
    };
    clients.set(clientId, client);

    console.log(`New connection: ${clientId} from ${ip}`);

    ws.on('pong', () => {
        client.isAlive = true;
        client.lastActivity = Date.now();
    });

    ws.send(JSON.stringify({
        ty: "sys", // type ‚Üí ty, system ‚Üí sys
        me: "Connection established", // message ‚Üí me
        clientId,
        st: "awi" // status ‚Üí st, awaiting_identification ‚Üí awi
    }));

    ws.on('message', async (data: Buffer) => {
        try {
            client.lastActivity = Date.now();
            const message = data.toString();
            console.log(`[${clientId}] Received: ${message}`);
            const parsed = JSON.parse(message);

            if (parsed.ty === "clt") { // type ‚Üí ty, client_type ‚Üí clt
                client.ct = parsed.ct; // clientType ‚Üí ct
                return;
            }

            if (parsed.ty === "idn") { // type ‚Üí ty, identify ‚Üí idn
                const allowedIds = new Set(await getAllowedDeviceIds());
                if (parsed.de && allowedIds.has(parsed.de)) { // deviceId ‚Üí de
                    client.de = parsed.de; // deviceId ‚Üí de
                    client.isIdentified = true;

                    // –ó–∞–≥—Ä—É–∂–∞–µ–º Telegram-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    const telegramInfo = await getDeviceTelegramInfo(parsed.de);
                    TELEGRAM_BOT_TOKEN = telegramInfo?.telegramToken ?? null;
                    TELEGRAM_CHAT_ID = telegramInfo?.telegramId?.toString() ?? null;

                    ws.send(JSON.stringify({
                        ty: "sys", // type ‚Üí ty, system ‚Üí sys
                        me: "Ident ok", // message ‚Üí me
                        clientId,
                        de: parsed.de, // deviceId ‚Üí de
                        st: "con" // status ‚Üí st, connected ‚Üí con
                    }));

                    // Notify browser clients about ESP connection
                    if (client.ct === "esp") { // clientType ‚Üí ct
                        clients.forEach(targetClient => {
                            if (targetClient.ct === "browser" && // clientType ‚Üí ct
                                targetClient.de === parsed.de && // deviceId ‚Üí de
                                targetClient.de !== null) { // deviceId ‚Üí de
                                console.log(`Notifying browser client ${targetClient.de} about ESP connection`); // deviceId ‚Üí de
                                targetClient.ws.send(JSON.stringify({
                                    ty: "est", // type ‚Üí ty, esp_status ‚Üí est
                                    st: "con", // status ‚Üí st, connected ‚Üí con
                                    de: parsed.de, // deviceId ‚Üí de
                                    // ts: new Date().toISOString() // timestamp ‚Üí ts
                                }));
                            }
                        });
                    }
                } else {
                    ws.send(JSON.stringify({
                        ty: "err", // type ‚Üí ty, error ‚Üí err
                        me: "ID err", // message ‚Üí me
                        clientId,
                        st: "rej" // status ‚Üí st, rejected ‚Üí rej
                    }));
                    ws.close();
                    return;
                }
                return;
            }

            if (!client.isIdentified) {
                ws.send(JSON.stringify({
                    ty: "err", // type ‚Üí ty, error ‚Üí err
                    me: "Ident Not", // message ‚Üí me
                    clientId
                }));
                return;
            }

            // Process logs from ESP
            if (parsed.ty === "log" && client.ct === "esp") { // type ‚Üí ty, log
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
                if (parsed.b1 === 'on' && parsed.z && Number(parsed.z) < 1) { // –†–µ–ª–µ 1 –≤–∫–ª—é—á–µ–Ω–æ –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ < 1–í
                    const now = new Date();
                    const message = `üö® –î–∞—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª! –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${DEVICE_NAME}, –í—Ä–µ–º—è: ${formatDateTime(now)}`;
                    console.log(message);
                    if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
                        sendTelegramMessage(message);
                    } else {
                        console.log('Telegram credentials not available for device');
                    }
                }

                clients.forEach(targetClient => {
                    if (targetClient.ct === "browser" && // clientType ‚Üí ct
                        targetClient.de === client.de) { // deviceId ‚Üí de
                        targetClient.ws.send(JSON.stringify({
                            ty: "log", // type ‚Üí ty
                            me: parsed.me, // message ‚Üí me
                            de: client.de, // deviceId ‚Üí de
                            // ts: new Date().toISOString(), // timestamp ‚Üí ts
                            or: "esp", // origin ‚Üí or
                            b1: parsed.b1, // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ª–µ 1
                            b2: parsed.b2, // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ª–µ 2
                            sp1: parsed.sp1, // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —É–≥–æ–ª –ø–µ—Ä–≤–æ–≥–æ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
                            sp2: parsed.sp2, // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —É–≥–æ–ª –≤—Ç–æ—Ä–æ–≥–æ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
                            z: parsed.z // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ inputVoltage
                        }));
                    }
                });
                return;
            }

            // Process command acknowledgments
            if (parsed.ty === "ack" && client.ct === "esp") { // type ‚Üí ty, acknowledge ‚Üí ack
                clients.forEach(targetClient => {
                    if (targetClient.ct === "browser" && // clientType ‚Üí ct
                        targetClient.de === client.de) { // deviceId ‚Üí de
                        targetClient.ws.send(JSON.stringify({
                            ty: "ack", // type ‚Üí ty, acknowledge ‚Üí ack
                            co: parsed.co, // command ‚Üí co
                            de: client.de, // deviceId ‚Üí de
                            // ts: new Date().toISOString() // timestamp ‚Üí ts
                        }));
                    }
                });
                return;
            }

            // Route commands to ESP
            if (parsed.co && parsed.de) { // command ‚Üí co, deviceId ‚Üí de
                let delivered = false;
                clients.forEach(targetClient => {
                    if (targetClient.de === parsed.de && // deviceId ‚Üí de
                        targetClient.ct === "esp" && // clientType ‚Üí ct
                        targetClient.isIdentified) {
                        targetClient.ws.send(message);
                        delivered = true;
                    }
                });

                ws.send(JSON.stringify({
                    ty: delivered ? "cst" : "err", // type ‚Üí ty, command_status ‚Üí cst, error ‚Üí err
                    st: delivered ? "dvd" : "enf", // status ‚Üí st, delivered ‚Üí dvd, esp_not_found ‚Üí enf
                    co: parsed.co, // command ‚Üí co
                    de: parsed.de, // deviceId ‚Üí de
                    // ts: new Date().toISOString() // timestamp ‚Üí ts
                }));
            }

        } catch (err) {
            console.error(`[${clientId}] Message error:`, err);
            ws.send(JSON.stringify({
                ty: "err", // type ‚Üí ty, error ‚Üí err
                me: "Invalid message format", // message ‚Üí me
                error: (err as Error).message,
                clientId
            }));
        }
    });

    ws.on('close', () => {
        console.log(`Client ${clientId} disconnected`);
        if (client.ct === "esp" && client.de) { // clientType ‚Üí ct, deviceId ‚Üí de
            clients.forEach(targetClient => {
                if (targetClient.ct === "browser" && // clientType ‚Üí ct
                    targetClient.de === client.de) { // deviceId ‚Üí de
                    targetClient.ws.send(JSON.stringify({
                        ty: "est", // type ‚Üí ty, esp_status ‚Üí est
                        st: "dis", // status ‚Üí st, disconnected ‚Üí dis
                        de: client.de, // deviceId ‚Üí de
                        // ts: new Date().toISOString(), // timestamp ‚Üí ts
                        re: "connection closed" // reason ‚Üí re
                    }));
                }
            });
        }
        clients.delete(clientId);
    });

    ws.on('error', (err: Error) => {
        console.error(`[${clientId}] WebSocket error:`, err);
    });
});

async function sendTelegramMessage(message: string) {
    const currentTime = Date.now();
    if (currentTime - lastTelegramMessageTime < TELEGRAM_MESSAGE_INTERVAL) {
        console.log('Telegram message throttled');
        return;
    }
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
        console.log('Cannot send Telegram message: Missing bot token or chat ID');
        return;
    }
    try {
        const response = await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: TELEGRAM_CHAT_ID,
            text: message,
        });
        console.log(`Telegram message sent: ${message}`, response.data);
        lastTelegramMessageTime = currentTime;
    } catch (error: any) {
        console.error('Error sending Telegram message:', error.response?.data || error.message);
    }
}

server.listen(PORT, () => {
    console.log(`WebSocket server running on ws://0.0.0.0:${PORT}${WS_PATH}`);
});